<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>All Posts</title>
    <!-- Add any necessary styles or scripts -->
    <style>
      body {
        font-family: arial;
        margin: 0;
        background-color: #f4f4f4;
      }
      nav {
        background: #ff5353;
        padding: 20px 10px;
      }
      nav ul {
        max-width: 960px;
        margin: 0 auto;
        padding: 0;
      }
      nav li {
        list-style-type: none;
        display: inline-block;
        margin: 0 10px 0 0;
      }
      nav a {
        color: #fff;
        font-size: 18px;
        background: rgba(255, 255, 255, 0.2);
        text-decoration: none;
        padding: 10px;
        display: block;
      }
      main {
        max-width: 960px;
        margin: 30px auto;
        padding: 0 10px;
      }
      .post-card {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-bottom: 20px;
      }
      .post-card h3 {
        color: #333;
      }
      .post-card p {
        color: #777;
      }
    </style>
  </head>
  <body>
    <h1>All Posts</h1>
    <main>
      <% posts.forEach(post => { %>
      <div class="post-card">
        <h3><%= user.displayName %></h3>
        <p><%= post.message %></p>

        <!-- Display replies 
          <div id="replies-container-<%= post._id %>">
            <% replies.filter(reply => reply.postId === post._id).forEach(reply => { %>
              <div class="reply-card">
                <p><%= reply.message %></p>
              </div>
            <% }); %>
          </div>
  
          Display reply count 
          <p>
            Replies:
            <span id="reply-count-<%= post._id %>">
              <% let postReplies = replies.filter(reply => reply.postId === post._id); %>
              <%= postReplies.length %>
            </span>
          </p>-->

        <!-- Reply button and input -->
        <button class="reply-btn" onclick="toggleReplyInput('<%= post._id %>')">
          Reply
        </button>
        <div id="reply-input-<%= post._id %>" style="display: none">
          <input
            type="text"
            id="reply-text-<%= post._id %>"
            placeholder="Type your reply"
          />
          <button onclick="submitReply('<%= post._id %>', '<%= user._id %>')">
            Submit Reply
          </button>
        </div>
      </div>
      <% }); %>
    </main>

    <script>
      function toggleReplyInput(postId) {
        const replyInput = document.getElementById(`reply-input-${postId}`);
        replyInput.style.display =
          replyInput.style.display === 'none' ? 'block' : 'none';
      }

      async function submitReply(postId, userId) {
        try {
          const replyText = document.getElementById(
            `reply-text-${postId}`
          ).value;

          // Make the POST request to create a new reply
          const response = await fetch('http://localhost:8080/replies/create', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              message: replyText,
              googleUser: userId,
              postId,
            }),
          });

          if (!response.ok) {
            throw new Error(`Failed to create reply: ${response.status}`);
          }

          // Parse the response JSON
          const data = await response.json();

          // Assuming the server responds with the created reply object
          console.log('Reply created:', data);
        } catch (error) {
          console.error('Error creating reply:', error.message);
        }
      }

      async function getAllReplies() {
        try {
          const response = await fetch('http://localhost:8080/replies/all', {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (!response.ok) {
            throw new Error(`Failed to fetch replies: ${response.status}`);
          }

          const replies = await response.json();

          console.log(replies);
          //  // Assuming data is an array of replies
          //   <% posts.forEach(post => { %>
          //     const repliesContainer = document.getElementById(`replies-container-${post._id}`);
          //     repliesContainer.innerHTML = ''; // Clear previous replies

          //     replies.filter(reply => reply.postId === post._id).forEach(reply => {
          //       const replyElement = document.createElement('div');
          //       replyElement.classList.add('reply-card');
          //       replyElement.innerHTML = `<p>${reply.message}</p>`;
          //       repliesContainer.appendChild(replyElement);
          //     });

          //     const replyCount = document.getElementById(`reply-count-${post._id}`);
          //     replyCount.innerText = replies.filter(reply => reply.postId === post._id).length;
          //   <% }); %>
        } catch (error) {
          console.error('Error fetching replies:', error.message);
        }
      }
      window.onload = getAllReplies;
    </script>
  </body>
</html>
